// ciclos while TODO
// falta ciclos do_while
// receiver UA  -check
while (STOP==FALSE) {       /* loop for input */
  res = read(fd,buf,1);   /* returns after 1 char has been input */
  if (res == -1) {
    log_error("receiver: failed reading SET from buffer.");
    return -1;}

    stateMachine(buf[0], NULL, NULL);
  if (state_machine.state == DONE) STOP=TRUE;
}

// llread -check
while (STOP==FALSE) {       
  res = read(fd,buf,1);   
  if (res == -1) {
    log_error("llread() - Failed reading frame from buffer.");
    return -1;}
  
  retStateMachine = stateMachine(buf[0], &dataBuf, &retBufferSize);
  if (retStateMachine == -1){
    c = C_REJ(linkLayer.sequenceNumber);
    log_error("llread() - Error in BCC");
    break;
  }
  if (retStateMachine == -2){
    c = C_RR(linkLayer.sequenceNumber);
    log_error("llread() - Error in C, wrong sequence number");
    break;
  }
  c = C_RR(linkLayer.sequenceNumber);
  if (state_machine.state == DONE) STOP=TRUE;
}

// receiver_DISC_UA
  /* parse DISC*/
while (STOP==FALSE) {       /* loop for input */
  res = read(fd,buf,1);   /* returns after 1 char has been input */
  if (res == -1) {
    log_error("receiver_DISC_UA() - Failed reading DISC from buffer.");
    return -1;
  }
  
  stateMachine(buf[0], NULL, NULL);
  if (state_machine.state == DONE) STOP=TRUE;
}

/* parse UA*/
while (STOP==FALSE) {       /* loop for input */
  res = read(fd,buf1,1);   /* returns after 1 char has been input */
  
  if (res == -1 && errno == EINTR) {  /*returns -1 when interrupted by SIGALRM and sets errno to EINTR*/
    log_caution("receiver_DISC_UA() - Failed reading UA from transmitter.");
    return -1;

  } else if (res == -1){
    log_error("receiver_DISC_UA() - Failed reading UA from buffer.");
    return -1;
  }
  
  stateMachine(buf1[0], NULL, NULL);
  if (state_machine.state == DONE) STOP=TRUE;
}

--------------

enum ReadingType {open, read, closeDISC, closeUA};

int readingCycle(enum ReadingType type){
  while (STOP==FALSE) {       /* loop for input */
    res = read(fd,buf,1);   /* returns after 1 char has been input */

    if (type == closeUA)
    {
      if (res == -1 && errno == EINTR) {  /*returns -1 when interrupted by SIGALRM and sets errno to EINTR*/
      log_caution("receiver_DISC_UA() - Failed reading UA from transmitter.");
      return -1;
      } else if (res == -1){
      log_error("receiver_DISC_UA() - Failed reading UA from buffer.");
      return -1;}
    }
    else
    {
      if (res == -1) {
        switch (type)
        {
        case open:
          log_error("receiver: failed reading SET from buffer.");
          break;
        case read:
          log_error("llread() - Failed reading frame from buffer.");
          break;
        case closeDISC:
          log_error("receiver_DISC_UA() - Failed reading DISC from buffer.");
          break;
        default:
          log_error("readingCycle() - Unknown type")
          break;
        }
      return -1;
      }
    }
    
    if (type == read)
    {
      retStateMachine = stateMachine(buf[0], &dataBuf, &retBufferSize);
      if (retStateMachine == -1){
        c = C_REJ(linkLayer.sequenceNumber);
        log_error("llread() - Error in BCC");
        break;
      }
      if (retStateMachine == -2){
        c = C_RR(linkLayer.sequenceNumber);
        log_error("llread() - Error in C, wrong sequence number");
        break;
      }
      c = C_RR(linkLayer.sequenceNumber);
    }
    else
    {
        stateMachine(buf[0], NULL, NULL);
    }


    if (state_machine.state == DONE) STOP=TRUE;
  }
  return 0;
}

